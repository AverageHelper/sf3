# About SF3
SF3 (Simple File Format Family) is a family of file format specifications. These file formats all follow a similar scheme and the same principles.

# Principles
SF3 formats follow these principles:

- **No versioning**
  These formats explicitly do not include any versioning at all. The way they are described in this document is final and will not change. This means the formats are eternally forwards and backwards compatible.
- **No extensibility**
  There are no vendor extensibility blocks or other parts that could be added by third parties. This ensures that a consumer of these formats will always be able to read the full file and know what every single bit in it means.
- **No optional blocks**
  There are no optional blocks or parts in the formats that could be omitted. This means there is no conditional parsing needed and the structure of the files is always clear.
- **Only raw data**
  The data is not compressed, encrypted, or otherwise transformed. Data is always raw. If encryption or compression is desired, the entire file can instead be wrapped in a compression or encryption stream (gzip, lzma, etc).
- **Always little-endian**
  The formats are always little-endian wherever byte order matters. This is compatible with the vast majority of processors and software today and means no byte rearrangement is necessary when loading to memory.
- **Similar layout**
  Each format in the family follows a very similar format of identifier, header, and payload. This ensures that the files remain easy to parse, understand, and debug.

# Specification Description
The format specifications in this document use a BNF-style abstract syntax language. The language is defined here:

:: BNF
Format       ::= Definition+
Definition   ::= Rule Identifier? Description? '\n'
Identifier   ::= '::=' Sequence
Description  ::= '---' text
Sequence     ::= Composition (' ' Composition)*
Composition  ::= (Rule | OctetArray | Octet | Type | '(' Sequence ')') (OneOrMore | AnyNumber | ExactNumber)?
OctetArray   ::= '[' octet (' ' octet)* ']'
Type         ::= ('int' | 'uint') IntBittage | 'float' FloatBittage | 'string' ExactNumber
IntBittage   ::= '8' | '16' | '24' | '32' | '64'
FloatBittage ::= '16' | '32' | '64'
Rule         ::= name
OneOrMore    ::= '+'
AnyNumber    ::= '*'
ExactNumber  ::= '{' number '}'

name         --- The name of a rule as a sequence of non-numeric ASCII characters.
octet        --- Eight bits expressed as two hexadecimal digits.
text         --- Human-readable textual description of the contents.
number       --- A textual description of the number of occurrences. Can make a reference to other rules, in which case the rule's content designates a runtime number.
::

White space unless otherwise mandated may be inserted liberally to aid readability. Each rule ultimately defines a sequence of octets that should be parsed. The ``Type``s mentioned translate to signed integers, unsigned integers, and IEEE floating point numbers of the given number of bits. ``string`` designates a UTF-8 encoded character sequence with an octet length as indicated by the required following ``ExactNumber`` rule.

# Formats
Each format is made up of the following structure, where a valid file must begin with the ``File`` rule.

:: BNF
File       ::= Identifier Header Payload
Identifier ::= [ 81 53 46 33 00 E0 D0 0D 0A 0A ] format-id
format-id  --- A single octet identifying the format.
::

The rationale for the ten octets in the identifier is as follows:

- ``81`` An octet to stop byte-peekers from determining text. The octet lies in the undefined ranges of ASCII, ISO-8859-1, Windows-1252, and SJIS.
- ``53 46 33`` ASCII sequence spelling ``SF3`` for human-readability.
- ``00`` A null octet to stop C-string utilities from trying to munch the rest of the file.
- ``E0D0`` An invalid UTF-8 octet sequence.
- ``0D0A0A`` A CRLFLF sequence to catch bad line conversion utilities.

The ``Header`` and ``Payload`` will be described by the individual formats.
The values for the ``format-id`` are interpreted as follows:

- ``00`` --- Text
- ``01`` --- Image
- ``02`` --- Audio
- ``03`` --- Model
- ``04`` --- Archive

Any other value for the ``format-id`` is invalid.

## Archive
The Archive format allows storing multiple files in one binary package. The file also includes some metadata so that the files can be stored with a relative path and mime-type, allowing both file-system extraction, and content inspection without explicit extraction.

:: BNF
Header       ::= Count MetadataSize
Payload      ::= Metadata Files
Count        ::= uint32                --- The number of entries.
MetadataSize ::= uint32                --- The octet size of the Metadata payload.
Metadata     ::= EntryOffset{Count} MetaEntry{Count}
EntryOffset  ::= uint32                --- The octet offset of the corresponding MetaEntry from the beginning of Metadata.
MetaEntry    ::= FileSize Mime Path    --- A descriptor of file size, mime type, and path.
FileSize     ::= uint32                --- The size of the corresponding file in bytes.
Mime         ::= uint8 string{uint8}   --- The mime-type of the corresponding file.
Path         ::= uint16 string{uint16} --- The relative path of the corresponding file.
Files        ::= FileOffset{Count} File{Count}
FileOffset   ::= uint32                --- The octet offset of the corresponding File from the beginning of Files. 
File         ::= uint8{OctetSize}      --- A binary file payload.
::

The included ``MetadataSize``, ``EntryOffset``, and ``FileOffset`` fields should allow constant-time access to any content within the archive.
If no mime-type is known for a file that should be stored, the corresponding ``Mime`` should be set to ``application/octet-stream``.

### Use-Case
This format is useful if you need a way to bundle files together into a single payload, and require constant-time, typed access to individual files without having to extract, decompress, or decrypt.

## Audio
This format is for storing plain audio sample data. It includes support for all types of sample formats and channel numbers out there. Unlike other formats, it also enforces the channel data to be interleaved rather than sequential, which foregoes the need for a length field, allowing the file to be written on the fly.

:: BNF
Header     ::= Samplerate Channels format 
Payload    ::= sample{Channels}*
Samplerate ::= uint32 --- The samplerate in Hz.
Channels   ::= uint8  --- The number of audio channels.
format     --- A single octet identifying the per-sample data type.
sample     --- A single-channel sample value in the format indicated by format.
::

The values for ``format`` are interpreted as follows:

- ``10`` --- ``int8``
- ``20`` --- ``int16``
- ``30`` --- ``int24``
- ``40`` --- ``int32``
- ``80`` --- ``int64``
- ``11`` --- ``uint8``
- ``21`` --- ``uint16``
- ``31`` --- ``uint24``
- ``41`` --- ``uint32``
- ``81`` --- ``uint64``
- ``42`` --- ``float32``
- ``82`` --- ``float64``

Any other value for ``format`` is invalid. 
The length of the payload is unbounded, but must always be a multiple of ``Channels*format-bits`` number of bits.

### Use-Case
This format is useful for raw audio data storage, which means it should be trivial to feed into an audio playback system with minimal overhead. Unlike the traditional uncompressed audio format, Wave, this follows a much clearer and simpler specification with sensible metadata encoding.

## Image
This format is for storing raw image data. Unlike plain data however, it includes a header that completely identifies the pixel data layout and format. The format supports 3D images as well.

:: BNF
Header        ::= Width Height Depth channels format
Payload       ::= Layer{Depth}
Layer         ::= Row{Height}
Row           ::= Color{Width}
Color         ::= channel{channel-count}
Width         ::= uint32
Height        ::= uint32
Depth         ::= uint32
format        --- A single octet identifying the per-channel data type.
channels      --- A single octet identifying the number and order of channels.
channel       --- A single-channel colour value in the format indicated by format.
channel-count --- The number of channels indicated by channels.
::

The values for ``format`` are interpreted as follows:

- ``10`` --- ``int8``
- ``20`` --- ``int16``
- ``40`` --- ``int32``
- ``80`` --- ``int64``
- ``11`` --- ``uint8``
- ``21`` --- ``uint16``
- ``41`` --- ``uint32``
- ``81`` --- ``uint64``
- ``22`` --- ``float16``
- ``42`` --- ``float32``
- ``82`` --- ``float64``

Any other value for ``format`` is invalid. 
The values for ``channels`` are interpreted as follows:

- ``10`` --- ``R``
- ``20`` --- ``RG``
- ``30`` --- ``RGB``
- ``40`` --- ``RGBA``
- ``21`` --- ``GR``
- ``31`` --- ``BGR``
- ``41`` --- ``ABGR``
- ``42`` --- ``ARGB``
- ``43`` --- ``BGRA``

Any other value for ``channels`` is invalid.
The payload must have exactly ``Width*Height*Depth*channel-count*format-bits`` number of bits.

### Use-Case
This format is useful for storing raw bitmap data that can be directly memory-mapped and read out. This is especially convenient for GPU texture uploads with DirectX, OpenGL, Vulkan, or similar.

## Model
This format is for singular triangular meshes only. It does not include a scene graph or the capability for non-triangular or non-static meshes. If animation of the model is desired, animation information can be delivered separately.

:: BNF
Header         ::= format material-type MaterialSize Count
Payload        ::= Material Faces Vertices
MaterialSize   ::= uint32                  --- The octet size of the Material payload.
Count          ::= uint32                  --- The number of entries in the Faces array.
Material       ::= Texture{material-count} --- An array of texture maps for the model's material.
Texture        ::= uint16 string{uint16}   --- A relative file path to an image.
Faces          ::= uint32{Count}           --- An array of 0-based indices into the Vertices array.
Vertices       ::= vertex*
Position       ::= float32 float32 float32 --- A vertex position in model-space.
UV             ::= float32 float32         --- A texture coordinate in texture-space.
Color          ::= float32 float32 float32 --- An RGB colour triplet, each channel in [0,1].
Normal         ::= float32 float32 float32 --- A surface normal, in tangent-space.
Tangent        ::= float32 float32 float32 --- A surface tangent, in tangent-space.
format         --- A single octet identifying the per-vertex format.
material-type  --- A single octet identifying the material used.
material-count --- The number of material textures as indicated by material-type.
vertex         --- A single-vertex value in the format indicated by format.
::

The values for ``format`` are interpreted as follows, and describe the layout of the ``vertex``:

- ``10`` --- ``Position``
- ``20`` --- ``Position`` ``UV``
- ``21`` --- ``Position`` ``Color``
- ``22`` --- ``Position`` ``Normal``
- ``30`` --- ``Position`` ``UV`` ``Normal``
- ``31`` --- ``Position`` ``Color`` ``Normal``
- ``40`` --- ``Position`` ``UV`` ``Normal`` ``Tangent``

Any other value for ``format`` is invalid. 
The values for ``material-type`` are interpreted as follows, and describe the usage and number of ``Texture``s:

- ``00`` --- (no material)
- ``10`` --- Albedo
- ``20`` --- Albedo Normal
- ``21`` --- Albedo Emission
- ``30`` --- Albedo Normal Specular
- ``31`` --- Albedo Normal Emission
- ``32`` --- Albedo Normal Metallic
- ``40`` --- Albedo Normal Metalness Roughness
- ``41`` --- Albedo Normal Specular Emission
- ``42`` --- Albedo Normal Metallic Emission
- ``50`` --- Albedo Normal Metalness Roughness Emission
- ``51`` --- Albedo Normal Metalness Roughness Occlusion
- ``60`` --- Albedo Normal Metalness Roughness Occlusion Emission

Any other value for ``material-type`` is invalid.
The Metallic texture is a combination of Metalness, Roughness, and Occlusion in the R, G, and B channels respectively.

The included ``MaterialSize`` field should allow constant-time access to the vertex data without having to parse the ``Material`` structure, if that structure is not needed. The number of ``vertex`` entries in the ``Vertices`` should be as high as the highest index in the ``Faces`` array, and cannot exceed ``Count``. Similarly, each entry in the ``Faces`` array must be lower than ``Count``.

### Use-Case
This format is useful for storing uncompressed, directly accessible 3D geometry data. It is packed in such a way that it should be trivial to upload into vertex-buffers for use with GPU rendering toolkits like DirectX, OpenGL, Vulkan, or similar. For instance, the ``format`` describes the vertex-array layout, the ``Faces`` array makes up the element-buffer, and the ``Vertices`` makes up the vertex-buffer.

## Text
The text format identifies the character encoding used, followed by the raw text payload. Essentially this means it is a regular "text file", but with a header that identifies the actual encoding used and thus liberates the need for encoding detecting kludges.

:: BNF
Header   ::= encoding
Payload  ::= text
encoding --- A single octet identifying a text encoding.
text     --- A sequence of octets in the encoding described by the header.
::

The values for ``encoding`` are interpreted as follows:

- ``00`` --- US-ASCII
- ``10`` --- UTF-8
- ``11`` --- UTF-16
- ``12`` --- UTF-32
- ``20`` --- ISO 8859-1
- ``21`` --- ISO 8859-2
- ``22`` --- ISO 8859-3
- ``23`` --- ISO 8859-4
- ``24`` --- ISO 8859-5
- ``25`` --- ISO 8859-6
- ``26`` --- ISO 8859-7
- ``27`` --- ISO 8859-8
- ``28`` --- ISO 8859-9
- ``29`` --- ISO 8859-10
- ``2A`` --- ISO 8859-11
- ``2B`` --- ISO 8859-12
- ``2C`` --- ISO 8859-13
- ``2D`` --- ISO 8859-14
- ``2E`` --- ISO 8859-15
- ``2F`` --- ISO 8859-16
- ``30`` --- Windows-874
- ``31`` --- Windows-1250
- ``32`` --- Windows-1251
- ``33`` --- Windows-1252
- ``34`` --- Windows-1253
- ``35`` --- Windows-1254
- ``36`` --- Windows-1255
- ``37`` --- Windows-1256
- ``40`` --- EUC-CN
- ``41`` --- EUC-JP
- ``42`` --- EUC-KR
- ``43`` --- EUC-TW
- ``50`` --- Shift JIS
- ``51`` --- Big5
- ``52`` --- GBK

Any other value for the ``encoding`` is invalid.

### Use-Case
This format is useful for storing textual content without encoding ambiguities, making it possible to transfer text without having to pay the overhead that certain encodings can impose.

# Metadata
These formats can be delivered as part of a binary stream or deposited in a file system. The following are recommendation for metadata identifiers to distinguish SF3 data without having to parse it.

## Mime-Type
The mime-types for SF3 files should be as follows, according to the format used:

- **Archive** ``application/x.sf3-archive``
- **Audio** ``audio/x.sf3``
- **Image** ``image/x.sf3``
- **Model** ``model/x.sf3``
- **Text** ``text/x.sf3``

If a general SF3 file should be designated, the mime-type should be ``application/x.sf3``. If/when the IANA registration for an official mime-type is approved, the ``x.`` prefix may be dropped.

## File Extension
The file extension should always end with ``.sf3``. Specifically, for the formats the following extended extensions may be used:

- **Archive** ``.ar.sf3``
- **Audio** ``.au.sf3``
- **Image** ``.img.sf3``
- **Model** ``.mod.sf3``
- **Text** ``.txt.sf3``
